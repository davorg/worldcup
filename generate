#!/usr/bin/perl

use strict;
use warnings;
use feature 'say';

use Time::Piece;
use JSON;

my $json = JSON->new->pretty->utf8->canonical;

open my $d_fh, '>', 'docs/js/data.js' or die "$!";

open my $s_fh, '<', 'stadiums.csv' or die "$!";

my $stadiums;

my @cols = qw[code name city utcoffset timezone];

while (<$s_fh>) {
  chomp;
  my %stad;
  @stad{@cols} = split /,/;
  $stadiums->{$stad{code}} = \%stad;
}

say $d_fh 'var stadiums = ' . $json->encode($stadiums) . ";\n";

open my $g_fh, '<', 'games.csv' or die "$!";

my $games;

@cols = qw[description date stadium team1 team2 group result];

while (<$g_fh>) {
  chomp;
  my %game;
  @game{@cols} = split /,/;

  $game{description} = $game{group} if $game{description} !~ /\D/;

  $game{date} = Time::Piece->strptime($game{date}, '%d/%m/%Y %H:%M')->datetime;

  my @classes = ("round-$game{description}", "stadium-$game{stadium}");
  push @classes, map { "team-$_" }
                 grep{ !/^(Winner|Runner|To be)/ }
                 @game{qw[team1 team2]};

  @classes = map { name2class($_) } @classes;
  $game{class} = join ' ', @classes;

  push @$games, \%game;
}

say $d_fh 'var games = ' . $json->encode($games) . ";\n";

sub name2class {
  my ($name) = @_;

  $name =~ s/\s+/-/g;

  return lc $name;
}
